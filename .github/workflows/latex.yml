# This is a basic workflow to help you get started with Actions

name: Latex

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - "main"
    paths: 
      #- .github/workflows/latex.yml
      - "**.tex"
  pull_request:
    branches: 
      - "main" 
    paths: 
      - "**.tex"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-latex"
  build-latex:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2.10.2
        id: filter
        with:
          filters: |
            base:
              - 'docs/Comm*.tex'
            design:
              - 'docs/Design/**'
            dp:
              - 'docs/DevelopmentPlan/**'
            ha:
              - 'docs/HazardAnalysis/**'
            psag:
              - 'docs/ProblemStatementAndGoals/**'
            reflect:
              - 'docs/Reflection/**'
            srs:
              - 'docs/SRS/**'
            ug:
              - 'docs/UserGuide/**'
            vnvp:
              - 'docs/VnVPlan/**'
            vnvr:
              - 'docs/VnVReport/**'
        

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
      - name: pdflatex Common
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' }}
        with:
          root_file: docs/Common.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex Comments
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' }}
        with:
          root_file: docs/Comments.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex MG
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.design == 'true' }}
        with:
          root_file: docs/Design/MG/MG.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex MIS
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.design == 'true' }}
        with:
          root_file: docs/Design/MIS/MIS.tex
          args: -pdf -interaction=nonstopmode -shell-escape
      
      - name: pdflatex DevelopmentPlan
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.dp == 'true' }}
        with:
          root_file: docs/DevelopmentPlan/DevelopmentPlan.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex ha
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.ha == 'true' }}
        with:
          root_file: docs/HazardAnalysis/HazardAnalysis.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex psag
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.psag == 'true' }}
        with:
          root_file: docs/ProblemStatementAndGoals/ProblemStatement.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex reflect
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.reflect == 'true' }}
        with:
          root_file: docs/Reflection/Reflection.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex ca
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.srs == 'true' }}
        with:
          root_file: docs/SRS/CA.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex srs-faq
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.srs == 'true' }}
        with:
          root_file: docs/SRS/SRS-FAQ.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex srs
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.srs == 'true' }}
        with:
          root_file: docs/SRS/SRS.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex userguide
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.ug == 'true' }}
        with:
          root_file: docs/UserGuide/UserGuide.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex VnVPlan
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.vnvp == 'true' }}
        with:
          root_file: docs/VnVPlan/VnVPlan.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: pdflatex VnVReport
        uses: dante-ev/latex-action@latest
        if: ${{ steps.filter.outputs.base == 'true' || steps.filter.outputs.vnvr == 'true' }}
        with:
          root_file: docs/VnVReport/VnVReport.tex
          args: -pdf -interaction=nonstopmode -shell-escape
          
      - name: Push new .pdfs
        if: ${{ success() }}
        run: |
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"
          git add .
          git commit -m "Generated new .pdf files in docs subfolders"
          git push
        continue-on-error: true
